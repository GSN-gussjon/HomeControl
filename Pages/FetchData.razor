@page "/fetchdata"
@using HADotNet.Core
@using HADotNet.Core.Clients
@using HADotNet.Entities.Models
@using HomeControl.Dictionaries
@using HomeControl.Models
@inject HttpClient Http
@inject StatesClient statesClient;
@inject ServiceClient serviceClient;
@inject EntityClient entityClient;

@if (lights == null || lights?.Any() != true)
{
    <LoadingIndicator/>
}
else
{
    <RadzenCard>
        <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                    Data="@lights" TItem="HAEntityModel" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or">
            <Columns>
                <RadzenDataGridColumn TItem="HAEntityModel" Property="Name" Filterable="false" Title="Name" Width="80px" TextAlign="TextAlign.Center" />
                <RadzenDataGridColumn TItem="HAEntityModel" Property="Id" Filterable="false" Title="ID" Width="80px" TextAlign="TextAlign.Center" />
                <RadzenDataGridColumn TItem="HAEntityModel" Property="State" Filterable="false" Title="State" Width="80px" TextAlign="TextAlign.Center" />
                <RadzenDataGridColumn TItem="HAEntityModel" Title="Actions" Sortable="false" Width="80px" TextAlign="TextAlign.Center">
                    <Template Context="data">
                        <RadzenButton ButtonStyle="ButtonStyle.Secondary" Icon="lightbulb" Click=@(args => OnToggle(@data.Id)) />
                        <RadzenButton ButtonStyle="ButtonStyle.Secondary" Icon="palette" Click=@(args => OnSetColor(@data.Id)) />
                        <RadzenButton ButtonStyle="ButtonStyle.Secondary" Icon="sync" Click=@(args => OnRefreshState(@data.Id)) />
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>

    </RadzenCard>
}

@code {
    #region Private members
    private string salonLightToggleResult;
    private List<HAEntityModel> lights;
    #endregion

    #region Click commands
    private async Task OnToggle(string id)
    {
        try
        {
            var result = await serviceClient.CallService("light", "toggle", new { entity_id = id });

            UpdateLightState(id, result.First().State);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }

    }

    private async Task OnRefreshState(string id)
    {
        try
        {
            var result = await statesClient.GetState(id);

            UpdateLightState(id, result.State);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private async Task OnSetColor(string id)
    {
        try
        {
            
        }
        catch (Exception ex)
        {
            
        }
    }
    #endregion

    #region Private methods
    private void UpdateLightState(string id, string state)
    {
        var light = lights.FirstOrDefault(x => x.Id == id);
        light.State = state;
    }
    #endregion

    #region Override
    protected override async Task OnInitializedAsync()
    {
        lights = new List<HAEntityModel>();
        var result = await entityClient.GetEntities("light");
        var services = await serviceClient.GetServices();

        foreach (var elem in result)
        {
            var state = await statesClient.GetState(elem);
            var light = new HAEntityModel()
                {
                    Id = elem,
                    State = state.State,
                    Name = EntityNames.Lights[state.EntityId]
                };

            lights.Add(light);
        }

    }
    #endregion
}
